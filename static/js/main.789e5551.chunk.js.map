{"version":3,"sources":["animation/WithTransition.scss","img/bg sync nonrecursive //.(gif)$","img/bg/animation-bridge.gif","img/bg/animation-fish-shop.gif","img/bg/animation-metro-city.gif","img/bg/animation-metro.gif","img/bg/animation-rainbow.gif","img/bg/animation-ramen.gif","img/bg/animation-sakura.gif","pages/HomePage.js","pages/ClusterPage.js","animation/WithTransition.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","files","require","backgrounds","item","HomePage","randomBackground","Math","floor","random","length","style","backgroundImage","this","className","onClick","props","linkTo","React","Component","ClusterPage","WithTransition","transitionName","_WithTransition","useState","renderChild","setRenderChild","history","useHistory","transitionTimeouts","appear","parseInt","styles","transitionDurationAppear","leave","transitionDurationLeave","transitionAppear","transitionAppearTimeout","transitionLeaveTimeout","route","setTimeout","push","App","basename","process","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EACAA,EAAOC,QAAU,CAAC,yBAA2B,MAAM,wBAA0B,Q,sHCD7E,IAAIC,EAAM,CACT,yBAA0B,GAC1B,4BAA6B,GAC7B,6BAA8B,GAC9B,wBAAyB,GACzB,0BAA2B,GAC3B,wBAAyB,GACzB,yBAA0B,IAI3B,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBN,EAAOC,QAAUE,EACjBA,EAAeE,GAAK,I,mBC5BpBL,EAAOC,QAAU,IAA0B,8C,mBCA3CD,EAAOC,QAAU,IAA0B,iD,mBCA3CD,EAAOC,QAAU,IAA0B,kD,mBCA3CD,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,+C,mBCA3CD,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,8C,+HCOrCc,G,YAAQC,OACRC,EAAcF,EAAMH,OAAOV,KAAI,SAAAgB,GAAI,OAAIH,EAAMG,MAK7CC,E,kDACF,aAAe,IAAD,8BACV,gBACKC,iBAAmBH,EAAYI,KAAKC,MAAMD,KAAKE,SAAWN,EAAYO,SAFjE,E,qDAKJ,IAAD,OACL,OACI,yBAAKnB,GAAG,OAAOoB,MAAO,CAAEC,gBAAgB,QAAD,OAAUC,KAAKP,iBAAf,QACnC,yBAAKQ,UAAU,UACX,yBAAKA,UAAU,cACX,oCAEJ,yBAAKA,UAAU,cACX,wDACA,4JACA,4BAAQC,QAAS,kBAAM,EAAKC,MAAMC,OAAO,cAAzC,uB,GAhBDC,IAAMC,WCRvBC,E,uKAEE,OACI,sD,GAHcF,IAAMC,W,0CCO1BE,EAAiB,SAACF,GAA6C,IAAlCG,EAAiC,uDAAhB,YAMhD,SAASC,EAAgBP,GAAO,MAEUE,IAAMM,UAAS,GAFzB,mBAErBC,EAFqB,KAERC,EAFQ,KAItBC,EAAUC,cAEVC,EAAqB,CACvBC,OAAQC,SAASC,IAAOC,0BACxBC,MAAOH,SAASC,IAAOG,0BAiB3B,OACI,kBAAC,IAAD,CACIC,kBAAkB,EAClBC,wBAAyBR,EAAmBC,OAC5CQ,uBAAwBT,EAAmBK,MAC3CZ,eAAgBA,GACfG,EAAc,kBAACN,EAAD,iBAAeH,EAAf,CAAsBC,OAf9B,SAACsB,GAEZb,GAAe,GAEfc,YAAW,WACPb,EAAQc,KAAKF,KACdV,EAAmBK,WASwC,MAItE,OAAOX,GCrBImB,E,uKAbX,OACE,yBAAKnD,GAAG,OACN,kBAAC,IAAD,CAAQoD,SAAUC,mCAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WAAWC,UAAWzB,EAAeD,KACjD,kBAAC,IAAD,CAAOyB,KAAK,IAAIC,UAAWzB,EAAehB,Y,GAPpCa,IAAMC,WCLJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.789e5551.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"transitionDurationAppear\":\"500\",\"transitionDurationLeave\":\"300\"};","var map = {\n\t\"./animation-bridge.gif\": 33,\n\t\"./animation-fish-shop.gif\": 34,\n\t\"./animation-metro-city.gif\": 35,\n\t\"./animation-metro.gif\": 36,\n\t\"./animation-rainbow.gif\": 37,\n\t\"./animation-ramen.gif\": 38,\n\t\"./animation-sakura.gif\": 39\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 32;","module.exports = __webpack_public_path__ + \"static/media/animation-bridge.a0684912.gif\";","module.exports = __webpack_public_path__ + \"static/media/animation-fish-shop.e3786860.gif\";","module.exports = __webpack_public_path__ + \"static/media/animation-metro-city.be186575.gif\";","module.exports = __webpack_public_path__ + \"static/media/animation-metro.f16311fd.gif\";","module.exports = __webpack_public_path__ + \"static/media/animation-rainbow.baac73e9.gif\";","module.exports = __webpack_public_path__ + \"static/media/animation-ramen.babe7ef2.gif\";","module.exports = __webpack_public_path__ + \"static/media/animation-sakura.b699955d.gif\";","import React from 'react'\n\nimport './HomePage.sass'\n\n/**\n * Import all backgrounds from img / bg\n */\nconst files = require.context('../img/bg', false, /\\.(gif)$/)\nconst backgrounds = files.keys().map(item => files(item))\n\n/**\n * Component of the home page\n */\nclass HomePage extends React.Component {\n    constructor() {\n        super()\n        this.randomBackground = backgrounds[Math.floor(Math.random() * backgrounds.length)]\n    }\n\n    render() {\n        return (\n            <div id=\"Home\" style={{ backgroundImage: `url('${this.randomBackground}')` }}>\n                <div className=\"Splash\">\n                    <div className=\"Background\">\n                        <p>&nbsp;</p>\n                    </div>\n                    <div className=\"Foreground\">\n                        <h1>Anime Data Visualization</h1>\n                        <p>An interactive data visualization experience by Alexandre CHAU, Pedro TORRES DA CUNHA & Joachim DUNANT for the COM-480 course</p>\n                        <button onClick={() => this.props.linkTo('/cluster')}>Let's start!</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport { HomePage }","import React from 'react'\n\n/**\n * Component of the cluster graph page\n */\nclass ClusterPage extends React.Component {\n    render() {\n        return (\n            <p>Hello Cluster page!</p>\n        )\n    }\n}\n\nexport { ClusterPage }","import React from 'react'\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'\nimport { useHistory } from 'react-router-dom'\n\nimport styles from './WithTransition.scss'\n\n/**\n * Transition higher-order component (HOC)\n * Allows to easily extend any component to have transitions\n * @param {React.Component} Component the React component to animate\n * @param {String} transitionName optional, the name of the transition to apply (defaults to \"FadeInOut\")\n */\nconst WithTransition = (Component, transitionName = 'FadeInOut') => {\n    /**\n     * Inner functional component to keep track of wether to display\n     * the child or not. This is a functional component rather\n     * than a class component to be able to call useHistory()\n     */\n    function _WithTransition(props) {\n        // useState hook to keep track of renderChild state\n        const [renderChild, setRenderChild] = React.useState(true)\n        // get access to router with history object\n        const history = useHistory()\n        // duration of transitions\n        const transitionTimeouts = {\n            appear: parseInt(styles.transitionDurationAppear),\n            leave: parseInt(styles.transitionDurationLeave),\n        }\n\n        /**\n         * This function (passed as props to the child component) should\n         * be used to go to another route while respecting transitions\n         * @param {String} route the route to go to after transition end\n         */\n        const linkTo = (route) => {\n            // Unmount child (this will trigger the fade-out animation)\n            setRenderChild(false)\n            // After the transition finished, go the the passed route\n            setTimeout(() => {\n                history.push(route)\n            }, transitionTimeouts.leave)\n        }\n\n        return (\n            <ReactCSSTransitionGroup\n                transitionAppear={true}\n                transitionAppearTimeout={transitionTimeouts.appear}\n                transitionLeaveTimeout={transitionTimeouts.leave}\n                transitionName={transitionName}>\n                {renderChild ? <Component {...props} linkTo={linkTo} /> : null}\n            </ReactCSSTransitionGroup>\n        )\n    }\n    return _WithTransition\n}\n\nexport { WithTransition }","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport './App.sass';\n\nimport { HomePage } from './pages/HomePage'\nimport { ClusterPage } from './pages/ClusterPage'\nimport { WithTransition } from './animation/WithTransition'\n\n/**\n * App class: entry point of this application\n * Renders the matched route with the corresponding page\n */\nclass App extends React.Component {\n  render() {\n    return (\n      <div id=\"App\">\n        <Router basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route path=\"/cluster\" component={WithTransition(ClusterPage)} />\n            <Route path=\"/\" component={WithTransition(HomePage)} />\n          </Switch>\n        </Router>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}