{"version":3,"sources":["img/bg sync nonrecursive //.(gif)$","img/bg/animation-bridge.gif","img/bg/animation-fish-shop.gif","img/bg/animation-metro-city.gif","img/bg/animation-metro.gif","img/bg/animation-rainbow.gif","img/bg/animation-ramen.gif","img/bg/animation-sakura.gif","Home.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","files","require","backgrounds","item","Home","randomBackground","Math","floor","random","length","style","backgroundImage","className","React","Component","App","basename","process","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4JAAA,IAAIA,EAAM,CACT,yBAA0B,GAC1B,4BAA6B,GAC7B,6BAA8B,GAC9B,wBAAyB,GACzB,0BAA2B,GAC3B,wBAAyB,GACzB,yBAA0B,IAI3B,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,mBC5BpBU,EAAOC,QAAU,IAA0B,8C,mBCA3CD,EAAOC,QAAU,IAA0B,iD,mBCA3CD,EAAOC,QAAU,IAA0B,kD,mBCA3CD,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,+C,mBCA3CD,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,8C,2ICKrCC,EAAQC,MACRC,EAAcF,EAAML,OAAOV,KAAI,SAAAkB,GAAI,OAAIH,EAAMG,MAK7CC,E,uKAGE,IAAMC,EAAmBH,EAAYI,KAAKC,MAAMD,KAAKE,SAAWN,EAAYO,SAE5E,OACI,yBAAKrB,GAAG,OAAOsB,MAAO,CAAEC,gBAAgB,QAAD,OAAUN,EAAV,QACnC,yBAAKO,UAAU,UACX,yBAAKA,UAAU,cACX,oCAEJ,yBAAKA,UAAU,cACX,wDACA,4JACA,uD,GAdLC,IAAMC,WCmBVC,MAnBf,WACE,OACE,yBAAK3B,GAAG,OACN,kBAAC,IAAD,CAAQ4B,SAAUC,mCAChB,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOC,KAAK,WACV,6BAGF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCVQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.01a44150.chunk.js","sourcesContent":["var map = {\n\t\"./animation-bridge.gif\": 26,\n\t\"./animation-fish-shop.gif\": 27,\n\t\"./animation-metro-city.gif\": 28,\n\t\"./animation-metro.gif\": 29,\n\t\"./animation-rainbow.gif\": 30,\n\t\"./animation-ramen.gif\": 31,\n\t\"./animation-sakura.gif\": 32\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 25;","module.exports = __webpack_public_path__ + \"static/media/animation-bridge.a0684912.gif\";","module.exports = __webpack_public_path__ + \"static/media/animation-fish-shop.e3786860.gif\";","module.exports = __webpack_public_path__ + \"static/media/animation-metro-city.be186575.gif\";","module.exports = __webpack_public_path__ + \"static/media/animation-metro.f16311fd.gif\";","module.exports = __webpack_public_path__ + \"static/media/animation-rainbow.baac73e9.gif\";","module.exports = __webpack_public_path__ + \"static/media/animation-ramen.babe7ef2.gif\";","module.exports = __webpack_public_path__ + \"static/media/animation-sakura.b699955d.gif\";","import React from 'react'\n\n/**\n * Import all backgrounds from img / bg\n */\nconst files = require.context('./img/bg', false, /\\.(gif)$/)\nconst backgrounds = files.keys().map(item => files(item))\n\n/**\n * Component of the home page\n */\nclass Home extends React.Component {\n    render() {\n        // Choose a random background\n        const randomBackground = backgrounds[Math.floor(Math.random() * backgrounds.length)]\n\n        return (\n            <div id=\"Home\" style={{ backgroundImage: `url('${randomBackground}')` }}>\n                <div className=\"Splash\">\n                    <div className=\"Background\">\n                        <p>&nbsp;</p>\n                    </div>\n                    <div className=\"Foreground\">\n                        <h1>Anime Data Visualization</h1>\n                        <p>An interactive data visualization experience by Alexandre CHAU, Pedro TORRES DA CUNHA & Joachim DUNANT for the COM-480 course</p>\n                        <button>Let's start!</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport { Home }","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport './style.sass';\n\nimport { Home } from './Home'\n\nfunction App() {\n  return (\n    <div id=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          {/* Route definitions: WARNING order matters, first prefix match! */}\n          <Route path=\"/genres\">\n            <p></p>\n          </Route>\n\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}